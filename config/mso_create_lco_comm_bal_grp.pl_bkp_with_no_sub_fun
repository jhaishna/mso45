#!/home/pin/opt/portal/7.5/ThirdParty/perl/5.8.0/bin/perl
#=================================================================================
# Load the pakcage mapipng file create/update /balance_group object
#=================================================================================
use strict;
use warnings;

use lib '.' ;
use pcmif;
use POSIX qw(strftime);


my $db_no = '';
my $DB_NO = '';
my $plan_id = '';
my $acct_poid = '';
my $billinfo_obj = '';
my $pkg_type = '';
my $svc_type = '';
my $das_type = '';
my $f1 = '';
my $out = '';
my $et_at = '';
my $plan_map_poid = '';
my $cfg_plan_map_poid = '';
my $level = '';
my $value = '';
my $count = 0;
my $success = 0;
my $error = 0;
my $LOGFILE;
my $ERRORFILE;

if ($#ARGV < 0){
    die "\nUsage: $0 <LCO_BAL_GRP_INPUT.CSV> \n\n".
	"Input file format for LCO_BAL_GRP_INPUT.CSV: \n".
	"ACCOUNT_POID, BILLLINFO_POID\n".
	 "12345, 678901\n";
}
my $LOG_HOME="/data/opt/portal/7.5/var/mso_bulk_utilities";
$LOGFILE = "$LOG_HOME/mso_lco_comm_create_bal_grp.pinlog";
my $date = strftime "%d%m%Y_%H%M%S", localtime;
$ERRORFILE = "mso_lco_comm_create_bal_grp_error_$date.out";
open(LOG, ">>$LOGFILE") or die("Could not open file $LOGFILE");
open(ERROR, ">>$ERRORFILE") or die("Could not open file $LOGFILE");

my $lco_bal_grp_input = shift(@ARGV);

open(INFO, $lco_bal_grp_input) || die "Error could not open file: $lco_bal_grp_input!\n\n".
    "\nUsage: $0 <LCO_BAL_GRP_INPUT.CSV> \n\n".
	"Input file format for LCO_BAL_GRP_INPUT.CSV: \n".
	"ACCOUNT_POID,BILLINFO_POID\n\n";

my @lines = <INFO>;	
close(INFO);

my $ebufp = pcmif::pcm_perl_new_ebuf();

my $pcm_ctxp = pcmif::pcm_perl_connect($db_no, $ebufp);

if (pcmif::pcm_perl_is_err($ebufp)) {
	print "Error in establishing a connection. Please check logfile: $LOGFILE\n";
	log_msg(3,"Error in opening connection: $ebufp");
	pcmif::pcm_perl_print_ebuf($ebufp);
	exit(1);
}

$DB_NO = $db_no;
$pkg_type = 0; #Deafulat value
 print "Creating LCO COMMISSION /balance_group for LCO ACCOUNTS : \n";

foreach $plan_id (@lines)	
{
	if ($plan_id !~ /^\#/){
		$count = $count+1;

		my @nums = split /\,/ , $plan_id;
		my $field_nums = @nums;

		if($field_nums == 2)
		{
			## Updating
			( $acct_poid, $billinfo_obj ) = split /\,/ , $plan_id;
			$billinfo_obj =~ s/\n//;
		}
		else
		{
			log_msg(3, "Error Missing Field");
			print ERROR "$plan_id\n";
			$error = $error+1;
			next;
		}

		log_msg(1,"acct_poid: $acct_poid billinfo_obj: $billinfo_obj");

	# check to see if balance_grp exists or not

$f1 = <<"XXX"

0 PIN_FLD_POID                POID [0] $DB_NO /search -1 0
0 PIN_FLD_FLAGS                INT [0] 256
0 PIN_FLD_TEMPLATE    STR [0] "select X from /balance_group where F1 = V1 and F2 = V2 "
0 PIN_FLD_ARGS          ARRAY [1] allocated 20, used 1
1         PIN_FLD_ACCOUNT_OBJ  POID [0] 0.0.0.1 /account $acct_poid 0
0 PIN_FLD_ARGS          ARRAY [2] allocated 20, used 1
1         PIN_FLD_NAME	STR [0] "LCO Commission"
0 PIN_FLD_RESULTS      ARRAY [0]
1     PIN_FLD_POID          POID [0] 0.0.0.0  0 0
XXX
;
		log_msg(1,"Input flist for LCO COMMISSION balance_group search: \n $f1");

		my $flistp = pcmif::pin_perl_str_to_flist($f1, $db_no, $ebufp);

		if (pcmif::pcm_perl_is_err($ebufp)) {
			log_msg(3,"Input flist conversion error: \n $ebufp");
			print ERROR "$plan_id \n";
			$error = $error+1;
			pcmif::pcm_perl_print_ebuf($ebufp);
			pcmif::pin_flist_destroy($flistp);
			pcmif::pcm_context_close($pcm_ctxp, 0, $ebufp);
			next;
		}

		my $out_flistp = pcmif::pcm_perl_op($pcm_ctxp, "PCM_OP_SEARCH", 0,
				$flistp, $ebufp);

		if (pcmif::pcm_perl_is_err($ebufp)) {
			log_msg(3,"SEARCH FAILED DUE TO BRM: $ebufp");
			print ERROR "$plan_id \n";
			$error = $error+1;
			pcmif::pcm_perl_print_ebuf($ebufp);
			pcmif::pin_flist_destroy($flistp);
			pcmif::pin_flist_destroy($out_flistp);
			pcmif::pcm_context_close($pcm_ctxp, 0, $ebufp);
			next;
		}

		$out = pcmif::pin_perl_flist_to_str($out_flistp, $ebufp);
		log_msg(1,"LCO COMMISSION Balance group search output: \n $out");

		pcmif::pin_flist_destroy($flistp);
		pcmif::pin_flist_destroy($out_flistp);

		if ($out =~ "/balance_group") {
			log_msg(1,"LCO Commission balance_group already exists ");

		} 
		else{       #else 1
			log_msg(1,"proceed to create new object for $acct_poid ");
		


	#
	# now we fill in an flist for UPDATING tax_config
	#


$f1 = <<"XXX"
0 PIN_FLD_POID           POID [0] $DB_NO /balance_group -1 1
0 PIN_FLD_ACCOUNT_OBJ    POID [0] 0.0.0.1 /account $acct_poid 0
0 PIN_FLD_BILLINFO_OBJ    POID [0] 0.0.0.1 /billinfo $billinfo_obj 0
0 PIN_FLD_NAME 		STR [0] "LCO Commission"
XXX
;

			log_msg(1,"creating new $acct_poid input flist: \n $f1");
			$flistp = pcmif::pin_perl_str_to_flist($f1, $db_no, $ebufp);

			if (pcmif::pcm_perl_is_err($ebufp)) {
				print "flist conversion failed\n";
				print ERROR "$plan_id \n";
				$error = $error+1;
				pcmif::pcm_perl_print_ebuf($ebufp);
				pcmif::pin_flist_destroy($flistp);
				pcmif::pcm_context_close($pcm_ctxp, 0, $ebufp);
				next;
			}

			$out_flistp = pcmif::pcm_perl_op($pcm_ctxp, "PCM_OP_CUST_CREATE_BAL_GRP", 0,
					$flistp, $ebufp);

			if (pcmif::pcm_perl_is_err($ebufp)) {
				print "creating /balance_group  failed- check log\n";
				log_msg(3,"creation of new package mapping call failed: \n $ebufp");
				print ERROR "$plan_id \n";
				$error = $error+1;
				pcmif::pcm_perl_print_ebuf($ebufp);
				pcmif::pin_flist_destroy($flistp);
				pcmif::pin_flist_destroy($out_flistp);
				pcmif::pcm_context_close($pcm_ctxp, 0, $ebufp);
				next;
			}
			$out = pcmif::pin_perl_flist_to_str($out_flistp, $ebufp);
			log_msg(1,"creating new COMMISSION balance_group output flist: \n $out");

			pcmif::pin_flist_destroy($flistp);
			pcmif::pin_flist_destroy($out_flistp);
		
			if ($out =~ "/balance_group") {
				print "LCO Commission balance_group $acct_poid\n" ;
				log_msg(1,"LCO Commission balance_group is created for : $acct_poid ");
				$success = $success+1;
			}

		} 
	# check to see if balance_grp exists with "LCO Balance"

$f1 = <<"XXX"

0 PIN_FLD_POID                POID [0] $DB_NO /search -1 0
0 PIN_FLD_FLAGS                INT [0] 256
0 PIN_FLD_TEMPLATE    STR [0] "select X from /balance_group where F1 = V1 and F2 = V2 "
0 PIN_FLD_ARGS          ARRAY [1] allocated 20, used 1
1         PIN_FLD_ACCOUNT_OBJ	POID [0] 0.0.0.1 /account $acct_poid 0
0 PIN_FLD_ARGS          ARRAY [2] allocated 20, used 1
1         PIN_FLD_NAME	STR [0] "LCO Balance"
0 PIN_FLD_RESULTS      ARRAY [0]
1     PIN_FLD_POID          POID [0] 0.0.0.0  0 0
XXX
;
		log_msg(1,"Input flist for LCO BALANCE balance_group search: \n $f1");

		my $flistp = pcmif::pin_perl_str_to_flist($f1, $db_no, $ebufp);

		if (pcmif::pcm_perl_is_err($ebufp)) {
			log_msg(3,"Input flist conversion error: \n $ebufp");
			print ERROR "$plan_id \n";
			$error = $error+1;
			pcmif::pcm_perl_print_ebuf($ebufp);
			pcmif::pin_flist_destroy($flistp);
			pcmif::pcm_context_close($pcm_ctxp, 0, $ebufp);
			next;
		}

		my $out_flistp = pcmif::pcm_perl_op($pcm_ctxp, "PCM_OP_SEARCH", 0,
				$flistp, $ebufp);

		if (pcmif::pcm_perl_is_err($ebufp)) {
			log_msg(3,"SEARCH FAILED DUE TO BRM: $ebufp");
			print ERROR "$plan_id \n";
			$error = $error+1;
			pcmif::pcm_perl_print_ebuf($ebufp);
			pcmif::pin_flist_destroy($flistp);
			pcmif::pin_flist_destroy($out_flistp);
			pcmif::pcm_context_close($pcm_ctxp, 0, $ebufp);
			next;
		}

		$out = pcmif::pin_perl_flist_to_str($out_flistp, $ebufp);
		log_msg(1,"LCO COMMISSION BALANCE Balance group search output: \n $out");

		pcmif::pin_flist_destroy($flistp);
		pcmif::pin_flist_destroy($out_flistp);

		if ($out =~ "/balance_group") {
			log_msg(1,"LCO Balance balance_group already exists ");

		} 
		else{       #else 1
			log_msg(1,"proceed to create new object for $acct_poid ");
		


	#
	# now we fill in an flist for UPDATING tax_config
	#


$f1 = <<"XXX"
0 PIN_FLD_POID           POID [0] $DB_NO /balance_group -1 1
0 PIN_FLD_ACCOUNT_OBJ    POID [0] 0.0.0.1 /account $acct_poid 0
0 PIN_FLD_BILLINFO_OBJ    POID [0] 0.0.0.1 /billinfo $billinfo_obj 0
0 PIN_FLD_NAME 		STR [0] "LCO Balance"
XXX
;

			log_msg(1,"creating new $acct_poid input flist: \n $f1");
			$flistp = pcmif::pin_perl_str_to_flist($f1, $db_no, $ebufp);

			if (pcmif::pcm_perl_is_err($ebufp)) {
				print "flist conversion failed\n";
				print ERROR "$plan_id \n";
				$error = $error+1;
				pcmif::pcm_perl_print_ebuf($ebufp);
				pcmif::pin_flist_destroy($flistp);
				pcmif::pcm_context_close($pcm_ctxp, 0, $ebufp);
				next;
			}

			$out_flistp = pcmif::pcm_perl_op($pcm_ctxp, "PCM_OP_CUST_CREATE_BAL_GRP", 0,
					$flistp, $ebufp);

			if (pcmif::pcm_perl_is_err($ebufp)) {
				print "creating /balance_group  failed- check log\n";
				log_msg(3,"creation of new package mapping call failed: \n $ebufp");
				print ERROR "$plan_id \n";
				$error = $error+1;
				pcmif::pcm_perl_print_ebuf($ebufp);
				pcmif::pin_flist_destroy($flistp);
				pcmif::pin_flist_destroy($out_flistp);
				pcmif::pcm_context_close($pcm_ctxp, 0, $ebufp);
				next;
			}
			$out = pcmif::pin_perl_flist_to_str($out_flistp, $ebufp);
			log_msg(1,"creating new LCO Balance balance_group output flist: \n $out");

			pcmif::pin_flist_destroy($flistp);
			pcmif::pin_flist_destroy($out_flistp);
		
			if ($out =~ "/balance_group") {
				print "LCO Commission balance_group $acct_poid\n" ;
				log_msg(1,"LCO Commission balance_group is created for : $acct_poid ");
				$success = $success+1;
			}

		} 
	} 
}
print "Total number of records processed: $count\n" ;
print "Total number of records successfully processed: $success\n" ;
print "Total number of records errored out: $error\n" ;
print "Please check the $LOGFILE for detailed information: \n";

pcmif::pcm_context_close($pcm_ctxp, 0, $ebufp);
if (pcmif::pcm_perl_is_err($ebufp)) {
	print "BAD close\n";
	log_msg(3,"BAD CLOSE");
        pcmif::pcm_perl_ebuf_to_str($ebufp);
	exit(1);
}
close (LOG);
close (ERROR);
sub log_msg 
{
  my $level = shift;
  my $msg = shift;
  my $localtime = localtime();
  if ( $level == 1 ) {
	print LOG "D ";
        print LOG "$localtime \n";
        print LOG "$msg \n"; 
  }

  if ( $level == 2 ) {
        print LOG "W ";
        print LOG "$localtime \n";
        print LOG "$msg \n";
  }

  if ( $level == 3 ) {
        print LOG "E ";
        print LOG "$localtime \n";
        print LOG "\t $msg \n";
  }
}

exit (0)
